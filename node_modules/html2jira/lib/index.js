'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable class-methods-use-this */
var parser = require('html-dom-parser');

var HTML2Jira = function () {
  function HTML2Jira() {
    _classCallCheck(this, HTML2Jira);
  }

  _createClass(HTML2Jira, [{
    key: 'toJira',
    value: function toJira(html) {
      var _this = this;

      this.html = html;
      this.dom = parser(html);
      this.results = '';

      this.dom.forEach(function (element) {
        _this.parse(element, 0, '');
      });
      return this.results;
    }
  }, {
    key: 'parse',
    value: function parse(element, depth, carryOver) {
      switch (element.type) {
        case 'tag':
          this.parseTag(element, depth, carryOver);
          break;
        case 'text':
          this.parseText(element, depth, carryOver);
          break;
        default:
        //   console.log(element);
      }
    }
  }, {
    key: 'parseText',
    value: function parseText(element, depth, carryOver) {
      // console.log(element)
      this.results += carryOver + element.data;
      // console.log(element)
    }
  }, {
    key: 'parseTag',
    value: function parseTag(element, depth, carryOverParm) {
      var _this2 = this;

      var carryOver = carryOverParm;
      var tag = '';
      var wrapped = false;
      var newDepth = depth;
      var tagId = element.name.toLowerCase();
      var skipChildren = false;
      var skipLineBreak = false;
      // let newCarryOver = ''
      switch (tagId) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          tag = tagId + '. ';
          break;
        case 'p':
          tag = '';
          break;
        case 'i':
          tag = '_';
          wrapped = true;
          break;
        case 'u':
          tag = '+';
          wrapped = true;
          break;
        case 'img':
          tag = this.processImage(element);
          skipLineBreak = true;
          skipChildren = true;
          break;
        case 'b':
        case 'strong':
          tag = '*';
          wrapped = true;
          break;
        case 'ol':
          tag = this.needNewLine(element);
          carryOver = this.pad(depth, '#') + ' ';
          break;
        case 'ul':
          tag = this.needNewLine(element);
          carryOver = this.pad(depth, '*') + ' ';
          break;
        case 'li':
          newDepth = depth - 1;
          break;
        case 'br':
          tag = '\n';
          break;
        case 'hr':
          tag = '----\n';
          break;
        case 'a':
          tag = this.processAnchor(element);
          skipChildren = true;
          skipLineBreak = true;
          break;
        // case 'table':
        //   tag = this.processTable(element);
        //   skipChildren = true;
        //   skipLineBreak = true;
        //   break;
        default:
        // ignore tag
      }
      this.results += tag;
      var preCRs = this.results.split('\n').length;
      if (!skipChildren) {
        element.children.forEach(function (child) {
          _this2.parse(child, newDepth + 1, carryOver);
        });
      }
      var postCRs = this.results.split('\n').length;
      if (wrapped) {
        this.results += tag;
      } else if (preCRs === postCRs) {
        if (!skipLineBreak) {
          this.results += '\n';
        }
      }
      if (depth === 0) {
        if (tagId === 'ol' || tagId === 'ul') {
          this.results += '\n';
        }
      }
    }

    // processTable(element) {
    //   return '';
    // }

  }, {
    key: 'processImage',
    value: function processImage(element) {
      var src = '';
      var attribs = '';
      var keys = Object.keys(element.attribs);
      keys.forEach(function (k) {
        var d = element.attribs[k];
        var space = attribs.length > 0 ? ', ' : '';
        switch (k.toLowerCase()) {
          case 'src':
            src = d;
            break;
          default:
            if (k === 'alt') {
              d = '"' + d + '"';
            }
            attribs += '' + space + k + '=' + d;
            break;
        }
      });
      var vbar = attribs.length === 0 ? '' : '|';
      return '!' + src + vbar + attribs + '!';
    }
  }, {
    key: 'processAnchor',
    value: function processAnchor(element) {
      var _this3 = this;

      var href = element.attribs.href;

      var label = '';
      element.children.forEach(function (child) {
        label += _this3.extractText(child);
      });
      if (label.trim().length === 0) {
        label = href;
      }
      return '[' + label + '|' + href + ']';
    }
  }, {
    key: 'extractText',
    value: function extractText(element) {
      var rc = '';
      if (element.type === 'text') {
        rc = element.data;
      }
      return rc;
    }
  }, {
    key: 'needNewLine',
    value: function needNewLine(element) {
      var rc = '';
      var parent = element.parent;

      if (parent && parent.type === 'tag' && parent.name.toLowerCase() === 'li') {
        var firstList = null;
        parent.children.forEach(function (child) {
          if (firstList === null && child.type === 'tag') {
            if (child.name.toLowerCase() === 'ol' || child.name.toLowerCase() === 'ul') {
              firstList = child;
            }
          }
        });
        if (firstList === element) {
          rc = '\n';
        }
      }
      return rc;
    }
  }, {
    key: 'pad',
    value: function pad(depth, spaces) {
      var rc = '';
      for (var i = 0; i < depth + 1; i += 1) {
        rc += spaces;
      }
      return rc;
    }
  }]);

  return HTML2Jira;
}();

module.exports = {
  HTML2Jira: HTML2Jira
};